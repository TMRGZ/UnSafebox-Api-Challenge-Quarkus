import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'io.quarkus'
    id 'java'
    id 'groovy'
    id 'jacoco'
    id "org.openapi.generator" version "7.0.0"
}

group = 'com.rviewer.skeletons'
version = '1.0.0'

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-resteasy-reactive'
    implementation 'io.quarkus:quarkus-hibernate-validator'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'
    // Swagger
    implementation 'io.quarkus:quarkus-smallrye-openapi'
    // Map Struct
    implementation 'org.mapstruct:mapstruct:1.4.0.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.0.Final'
    // API First
    implementation 'org.openapitools:jackson-databind-nullable:0.2.4'
    // Testing
    testImplementation 'io.quarkiverse.groovy:quarkus-groovy-junit5:3.2.2'
    // Security
    implementation 'io.quarkus:quarkus-security'
    implementation 'io.quarkus:quarkus-security-jpa-reactive'
    // Database
    implementation 'io.quarkus:quarkus-hibernate-reactive-panache'
    runtimeOnly 'io.quarkus:quarkus-reactive-pg-client'
    testImplementation 'com.h2database:h2:2.1.214'
    // Liquibase
    implementation "io.quarkus:quarkus-liquibase"

}

tasks.register('buildServer', GenerateTask) {
    generatorName = "jaxrs-spec"
    inputSpec = "$rootDir/api/open-api.spec.yaml"
    apiPackage = "com.rviewer.skeletons.infrastructure.controller"
    modelPackage = "com.rviewer.skeletons.application.model"
    outputDir = "$buildDir/generated/sources".toString()
    modelNameSuffix = "Dto"
    configOptions = [
            sourceFolder                  : "src/main/java",
            library                       : "quarkus",
            dateLibrary                   : "java8",
            generateBuilders              : "true",
            interfaceOnly                 : "true",
            skipDefaultInterface          : "true",
            useSwaggerAnnotations         : "false",
            useTags                       : "true",
            useJakartaEe                  : "true",
            additionalModelTypeAnnotations: "@lombok.Generated"
    ]
    globalProperties = [
            apiTests  : "false",
            modelTests: "false"
    ]

}

tasks.compileJava.dependsOn(buildServer)

sourceSets {
    main {
        java {
            srcDir "${buildDir}/generated/sources/src/main/java"
        }
    }
}

test {
    useJUnitPlatform()

    testLogging {
        events "PASSED", "SKIPPED", "FAILED"
    }
    ignoreFailures = true
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.10"
    reportsDirectory = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
}

/*
************************************************************************************
************************ Task to obtain a clear test report ************************
************************************************************************************
*/
tasks.withType(Test).configureEach {
    testLogging {
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED

        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        debug {
            events TestLogEvent.FAILED,
                    TestLogEvent.PASSED

            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) {
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}